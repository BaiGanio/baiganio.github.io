{"version":3,"sources":["webpack:///src/app/@modules/teachers/component/teacher-preview/teacher-preview.component.ts","webpack:///src/app/@modules/teachers/component/vote-for-teacher/vote-for-teacher.component.ts","webpack:///src/app/@modules/teachers/component/teacher-preview/teacher-preview.component.html","webpack:///src/app/@modules/teachers/component/vote-for-teacher/vote-for-teacher.component.html","webpack:///src/app/@modules/teachers/teachers.component.html","webpack:///src/app/@modules/teachers/teachers.component.ts","webpack:///src/app/@components/questionnaire/questionnaire.component.html","webpack:///src/app/@components/questionnaire/questionnaire.component.ts","webpack:///src/app/@modules/teachers/views/craftsman-menu.component.ts","webpack:///src/app/@modules/teachers/views/teacher-details/teacher-details.component.ts","webpack:///src/app/@modules/teachers/views/craftsman-menu.component.html","webpack:///src/app/@modules/teachers/models/teacher-preview.model.ts","webpack:///src/app/@modules/teachers/views/teacher-details/teacher-details.component.html","webpack:///src/app/@modules/courses/models/edit-course.model.ts","webpack:///src/app/@modules/courses/components/edit-course/edit-course.component.html","webpack:///src/app/@modules/courses/components/edit-course/edit-course.component.ts","webpack:///src/app/@modules/courses/components/delete-course/delete-course.component.ts","webpack:///src/app/@modules/courses/components/create-course/create-course.component.ts","webpack:///src/app/@modules/courses/views/courses-details/courses-details.component.html","webpack:///src/app/@modules/courses/views/courses-details/courses-details.component.ts","webpack:///src/app/@modules/teachers/teachers-routing-module.module.ts","webpack:///src/app/@modules/teachers/teachers.module.ts"],"names":["TeacherPreviewComponent","VoteForTeacherComponent","dialogRef","data","formBuilder","this","teacher","model","close","teacherService","errorHandlerService","teachers","Array","loading","totalTeachers","vote","TeachersComponent","dialog","snackbar","router","authService","userService","successfulUpdate","successfulUpdateMessage","isLogged","isAuthenticated","getTeachers","getUserByToken","subscribe","response","user","body","console","log","error","teacherId","navigate","output","starredTeachers","forEach","element","Id","open","width","maxHeight","afterClosed","teacherName","Name","$dialogRef","TeacherName","tryVoteForTeacher","voteForTeacher","TeacherId","err","handleRequestError","push","id","Email","email","Image","image","name","UserId","user_id","AccrNumber","accr_number","Status","status","CreatedOn","created_on","ModifiedOn","modified_on","Courses","courses","Stars","stars","length","QuestionnaireComponent","CraftsmanMenuComponent","TeacherDetailsComponent","_database","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","checklistSelection","getLevel","node","level","isExpandable","expandable","getChildren","children","hasChild","_","_nodeData","hasNoContent","item","transformer","existingNode","get","flatNode","set","treeFlattener","treeControl","dataSource","dataChange","getDescendants","every","child","isSelected","some","descendantsAllSelected","toggle","descendants","select","deselect","checkAllParentsSelection","parent","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","dataNodes","indexOf","currentNode","parentNode","insertItem","expand","itemValue","nestedNode","updateItem","autoFocus","addQuestionnaire","TeacherPreviewModel","userId","accrNumber","createdOn","modifiedOn","activatedRoute","getTeacherById","snapshot","params","EditCourseModel","description","isActive","startDate","endDate","CourseId","Description","IsActive","StartDate","EndDate","Teachers","DeleteCourseComponent","EditCourseComponent","activeTab","editCourseForm","group","toString","selectTeacherForm","Teacher","editCourseImageForm","CourseImg","required","defaultCourseImg","updateCourseEntry","label","course","controls","value","img2base64","teacherEntry","find","t","setValue","event","target","files","resizeImage","then","blob","reader","FileReader","onload","e","result","readAsDataURL","file","maxWidth","Promise","resolve","reject","src","URL","createObjectURL","newWidth","newHeight","height","canvas","document","createElement","getContext","drawImage","toBlob","type","onerror","dismiss","CreateCourseComponent","coursesService","addCourseForm","courseName","createCourse","CoursesDetailsComponent","TeachersRoutingModule","TeachersModule","routes","path","component","displayedColumns","totalCourses","getCourses","teacherNameFilterValue","querySelector","courseNameFilterValue","filterPredicate","filter","trim","toLowerCase","split","paginator","firstPage","tryCreateCourse","courseId","getCourseById","openEditCourseModal","tryUpdateCourse","title","confirmText","rejectText","tryDeleteCourse","tryDeleteAllCourses","getCoursesPreview","start_date","end_date","is_active","IsElectable","is_electable","EnrolledStudents","enrolled_students","EnrolledUserId","enrolled_user_id","sort","Object","values","includes","updateCourseInfo","updateCoursePicture","addTeacherCourse","updateCourse","success","handleSuccess","handleError","image2base64","ImageAsBase64","addTeacher2Course","editedCourse","splice","findIndex","u","duration","horizontalPosition","verticalPosition","panelClass","deleteCourse","deleteAllCourses","res","applyFilter","forChild","forRoot","animationType","threeBounce","primaryColour","secondaryColour","backdropBorderRadius","fullScreenBackdrop"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder } from '@angular/forms';\nimport { BaseDialogData } from 'src/app/@shared/interfaces/base-dialog.interface';\nimport { TeacherPreviewModel } from '../../models/teacher-preview.model';\n\n\n@Component({\n  selector: 'app-teacher-preview',\n  templateUrl: './teacher-preview.component.html',\n  styleUrls: ['./teacher-preview.component.scss']\n})\nexport class TeacherPreviewComponent implements OnInit {\nteacher: TeacherPreviewModel;\n  constructor(\n    public dialogRef: MatDialogRef<TeacherPreviewComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: BaseDialogData,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    this.teacher = this.data.model;\n  }\n\n  onRejectClick() {\n    this.dialogRef.close();\n  }\n\n}","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseDialogData } from 'src/app/@shared/interfaces/base-dialog.interface';\nimport { TeacherPreviewModel } from '../../models/teacher-preview.model';\nimport { TeacherService } from 'src/app/@services/teacher.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n\n@Component({\n  selector: 'app-vote-for-teacher',\n  templateUrl: './vote-for-teacher.component.html',\n  styleUrls: ['./vote-for-teacher.component.scss']\n})\nexport class VoteForTeacherComponent implements OnInit {\n  teachers = new Array<TeacherPreviewModel>();\n  loading = false;\n  totalTeachers = 0;\n\n  constructor(\n    public dialogRef: MatDialogRef<VoteForTeacherComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: BaseDialogData,\n    private teacherService: TeacherService,\n    private errorHandlerService: ErrorHandlerService,\n  ) { }\n\n  ngOnInit() {\n    this.loading = true;\n  }\n\n  dismiss() {\n    this.dialogRef.close();\n  }\n\n  vote() {\n    this.dialogRef.close(true);\n  }\n\n}","<div class=\"col-md-12 col-center text-center\">\n    <div class=\"card\">\n        <br/>\n        <h2> {{teacher.Name}} </h2>\n        <div class=\"card-body row\">\n            <div class=\"card col-md-3\">\n                <div class=\"card-body\">\n                    <img src='{{ teacher.Image }}' class=\"img-thumbnail img-fluid\" alt=\"Sample image\">\n                    <div style=\"text-align: center;\">\n                        <br/>\n                        <p id=\"statusHolder\">Status: <span>{{teacher.Status}}</span></p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card col-md-6\">\n                <div class=\"card-body\">\n                    <h4 style=\"text-align: center;\">ID : {{teacher.Id}} </h4>\n                    <hr/>\n                    <div style=\"text-align: left\">\n                        <h5><b>Email :</b> {{teacher.Email}} </h5>\n                        <h5><b>UserId :</b> {{teacher.UserId}} </h5>\n                        <h5><b>AccrNumber :</b> {{teacher.AccrNumber}} </h5>\n                        <h5><b>Created on :</b> {{teacher.CreatedOn | date: 'dd-MMM-yy'}} </h5>\n                    </div> \n                </div>\n            </div>\n            <div class=\"card col-md-3\">\n                <div class=\"card-body\">\n                    <h4>Lead Courses</h4> \n                    <hr/>\n                    <div class=\"course\">\n                        <p>Course Name</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <p><b>Last updated on :</b> {{teacher.ModifiedOn | date: 'dd-MMM-yy' }}</p>\n    </div>\n</div>","<div class=\"text-center\">\n    <mat-card-content>\n    <div class=\"\">\n        <h4>If you like this teacher - hit the star below.</h4>\n        <hr/>\n        <h5>Reward </h5>\n        <h5>{{data.model.TeacherName}}</h5>\n        <h5> with <span>&#11088;</span></h5>\n        <br/>\n        <p>Vote is anonymous!</p>\n        <hr/>\n        <div class=\"text-center\">\n            <!-- <button id=\"close\" class=\"mr-2\" mat-raised-button color=\"primary\" (click) = \"dismiss()\">\n               <span>&times;</span>\n            </button>  -->\n            <button  class=\"mr-2\" mat-raised-button color=\"primary\" (click) = \"vote()\" >\n                <div class=\"rating\">\n                    <span>☆</span>\n                </div>\n            </button>\n        </div>\n    </div>\n</mat-card-content>\n</div>","<div class=\"text-center\">\n    <h3>Teachers</h3>\n    <p>Total Of: {{totalTeachers}}</p>\n    <hr>\n</div>\n\n<div class=\"row\">\n      <div class=\"dim\" *ngIf='successfulUpdate'>\n    <div class=\"msg\">\n      <h1>{{successfulUpdateMessage}}</h1>\n      <br><br>\n      <button\n        class=\"btn btn-outline-info\"\n        (click) = dismiss()>\n        Dismiss\n      </button>\n    </div>\n\n  </div>\n    <div *ngFor='let teacher of teachers' class=\"col-md-3 text-center\">\n        <div class=\"card\">\n            <div class=\"card-body\">\n                <img \n                    src='{{teacher.Image}}' \n                    class=\"img-thumbnail img-fluid\" \n                    alt=\"Sample image\">\n                    <br><br>\n                <h5>{{ teacher.Name }}</h5>                \n                <!-- <p>Status: {{ teacher.Status }}</p> -->\n                <hr>  \n                <div style=\"font-size: 1.2em;\">\n                    <span>&#11088;</span> {{teacher.Stars}}\n                </div>\n                <hr>\n                <button mat-raised-button color='primary' class=\"text-center ml-2\"\n                    (click)=\"showTeacher(teacher.Id)\" ><i class=\"fas fa-search\"></i>\n                </button>\n                <button *ngIf='isLogged && !notVotedYet(teacher.Id)' mat-raised-button class=\"text-center ml-2\"\n                    (click)=\"voteForTeacher(teacher.Id)\"> Vote\n                </button>\n            </div>    \n        </div>  \n    </div>\n</div>\n\n<ngx-loading [show]=\"loading\" [config]=\"{ backdropBorderRadius: '14px', fullScreenBackdrop: true }\"></ngx-loading>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\nimport { TeacherService } from 'src/app/@services/teacher.service';\nimport { TeacherPreviewModel } from './models/teacher-preview.model';\nimport { Router } from '@angular/router';\nimport { CourseDetailsModel } from '../courses/models/course-details-model.module';\nimport { CoursePreviewModel } from '../courses/models/course-preview-model.module';\nimport { CoursePreviewComponent } from '../courses/components/course-preview/course-preview.component';\nimport { TeacherPreviewComponent } from './component/teacher-preview/teacher-preview.component';\nimport { VoteForTeacherComponent } from './component/vote-for-teacher/vote-for-teacher.component';\nimport { AuthService } from 'src/app/@services/auth.service';\nimport { UserDataService } from 'src/app/@services/user-data.service';\n\n@Component({\n  selector: 'app-teachers',\n  templateUrl: './teachers.component.html',\n  styleUrls: ['./teachers.component.scss']\n})\nexport class TeachersComponent implements OnInit {\n  loading = false;\n  totalTeachers = 0;\n  teachers = new Array<TeacherPreviewModel>();\n  successfulUpdate = false;\n  successfulUpdateMessage = '';\n  isLogged = false;\n  user: any;\n\n  constructor(\n    private dialog: MatDialog,\n    private errorHandlerService: ErrorHandlerService,\n    private snackbar: MatSnackBar,\n    private router: Router,\n    private teacherService: TeacherService,\n    private authService: AuthService,\n    private userService: UserDataService) { }\n\n  ngOnInit() {\n    this.isLogged = this.authService.isAuthenticated();\n    this.loading = true;\n    this.getTeachers();\n    this.getUserByToken();\n  }\n\n  getUserByToken() {\n    this.userService.getUserByToken()\n      .subscribe(\n          response => {\n              this.user = response.body;\n              console.log(this.user);\n          },\n          error => {\n              console.log(error);\n          }\n      );\n  }\n\n  goToTeacher(teacherId: string) {\n    this.router.navigate(['/teachers/' + teacherId]);\n  }\n\n  notVotedYet(teacherId: string){\n    let output = true;\n    this.user.starredTeachers.forEach(element => {\n      if(element.Id === teacherId ){\n        output = false;\n      }\n    });\n\n    return output;\n  }\n\n  showTeacher(teacherId: string) {\n    let teacher: TeacherPreviewModel;\n    this.teachers.forEach( (element) => {\n        if (element.Id === teacherId) {\n          teacher = element;\n          return;  \n        }\n    });\n    const $dialogRef =\n        this.dialog.open(\n            TeacherPreviewComponent,\n            {\n              width: '80vw',\n              maxHeight: '100vh',\n              data: { model: teacher }\n            }\n        );\n    $dialogRef.afterClosed().subscribe();\n  }\n\n  voteForTeacher(teacherId: string){\n    this.loading = true;\n    let teacherName = \"\";\n    this.teachers.forEach(element => {\n      if(element.Id === teacherId){\n        teacherName = element.Name;\n        return;\n      }\n    });\n    const $dialogRef =\n      this.dialog.open(\n        VoteForTeacherComponent, \n          {\n           data:{\n              width: '80vw',\n              maxHeight: '100vh',\n              model: {\n                TeacherName: teacherName\n            }\n            }\n          }\n      );\n    this.tryVoteForTeacher($dialogRef, teacherId);\n    this.loading = false;\n  }\n\n  private tryVoteForTeacher($dialogRef, teacherId: string) {\n    $dialogRef.afterClosed()\n      .subscribe(\n        response => {\n          if(response === true){\n            this.teacherService.voteForTeacher(\n              {TeacherId : teacherId}\n            )\n            .subscribe(\n              response => {\n                let teacherName = \"\";\n                  this.teachers.forEach(element => {\n                    if(element.Id === teacherId){\n                      teacherName = element.Name;\n                      return;\n                    }\n                    \n                  });\n                this.loading = false;\n                this.successfulUpdate = true;\n                this.successfulUpdateMessage = `You have successfully starred ⭐ for ${teacherName}!`;\n              }, \n              err => {\n                this.loading = false;\n                this.errorHandlerService.handleRequestError(err);\n              }\n            );\n          }\n        }\n      );\n  }\n\n  getTeachers() {\n    this.loading = true;\n    this.teacherService.getTeachers()\n      .subscribe(\n        response => {\n          response.body.forEach(element => {\n            const c = {\n              Id: element.id || '',\n              Email: element.email,\n              Image: element.image || '',\n              Name: element.name || '',\n              UserId: element.user_id || '',\n              AccrNumber: element.accr_number,\n              Status: element.status || '',\n              CreatedOn: element.created_on || '',\n              ModifiedOn: element.modified_on || '',\n              Courses: element.courses as Array<CoursePreviewModel> || '',\n              Stars: element.stars || 0\n            };\n            this.teachers.push(c as TeacherPreviewModel);\n          });\n        }, err => {\n          this.errorHandlerService.handleRequestError(err);\n        }, () => {\n          this.totalTeachers = this.teachers.length;\n          this.loading = false;\n        }\n      );\n  }\n\n  dismiss() {\n    this.successfulUpdate = false;\n  }\n}\n","<h3> [course.Name] Questionnaire & selectable [q.Type]</h3>\n<hr><br>\n<h3>selectable [test.Type]</h3>\n<hr><br>\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n      <button mat-icon-button disabled></button>\n      <mat-checkbox class=\"checklist-leaf-node\"\n                    [checked]=\"checklistSelection.isSelected(node)\"\n                    (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n    </mat-tree-node>\n  \n    <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\n      <button mat-icon-button disabled></button>\n      <mat-form-field>\n        <input matInput #itemValue placeholder=\"New item...\">\n      </mat-form-field>\n      <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n    </mat-tree-node>\n  \n    <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n      <button mat-icon-button matTreeNodeToggle\n              [attr.aria-label]=\"'toggle ' + node.filename\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n        </mat-icon>\n      </button>\n      <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                    [indeterminate]=\"descendantsPartiallySelected(node)\"\n                    (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\n      <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button>\n    </mat-tree-node>\n</mat-tree>\n<br>\n<hr>\n<button>Update</button>\n\n  ","import {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component, OnInit} from '@angular/core';\nimport { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';\nimport { ChecklistDatabase, TodoItemFlatNode, TodoItemNode } from 'src/app/@shared/interfaces/checklist-database.module';\n\n\n@Component({\n  selector: 'app-questionnaire',\n  templateUrl: './questionnaire.component.html',\n  styleUrls: ['./questionnaire.component.scss']\n})\nexport class QuestionnaireComponent implements OnInit {\n\n\n   /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n\n   flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n   /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n   nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n   /** A selected parent node to be inserted */\n   selectedParent: TodoItemFlatNode | null = null;\n\n   /** The new item's name */\n   newItemName = '';\n\n   treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n   treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n   dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n   /** The selection for checklist */\n   checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\n\n   constructor(private _database: ChecklistDatabase) {\n     this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n       this.isExpandable, this.getChildren);\n     this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\n     this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n     _database.dataChange.subscribe(data => {\n       this.dataSource.data = data;\n     });\n   }\n\n  ngOnInit() {\n  }\n\n   getLevel = (node: TodoItemFlatNode) => node.level;\n\n   isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n   getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n   hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n   hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\n\n   /**\n    * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n    */\n   transformer = (node: TodoItemNode, level: number) => {\n     const existingNode = this.nestedNodeMap.get(node);\n     const flatNode = existingNode && existingNode.item === node.item\n         ? existingNode\n         : new TodoItemFlatNode();\n     flatNode.item = node.item;\n     flatNode.level = level;\n     flatNode.expandable = !!node.children;\n     this.flatNodeMap.set(flatNode, node);\n     this.nestedNodeMap.set(node, flatNode);\n     return flatNode;\n   }\n\n   /** Whether all the descendants of the node are selected. */\n   descendantsAllSelected(node: TodoItemFlatNode): boolean {\n     const descendants = this.treeControl.getDescendants(node);\n     const descAllSelected = descendants.every(child =>\n       this.checklistSelection.isSelected(child)\n     );\n     return descAllSelected;\n   }\n\n   /** Whether part of the descendants are selected */\n   descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n     const descendants = this.treeControl.getDescendants(node);\n     const result = descendants.some(child => this.checklistSelection.isSelected(child));\n     return result && !this.descendantsAllSelected(node);\n   }\n\n   /** Toggle the to-do item selection. Select/deselect all the descendants node */\n   todoItemSelectionToggle(node: TodoItemFlatNode): void {\n     this.checklistSelection.toggle(node);\n     const descendants = this.treeControl.getDescendants(node);\n     this.checklistSelection.isSelected(node)\n       ? this.checklistSelection.select(...descendants)\n       : this.checklistSelection.deselect(...descendants);\n\n     // Force update for the parent\n     descendants.every(child =>\n       this.checklistSelection.isSelected(child)\n     );\n     this.checkAllParentsSelection(node);\n   }\n\n   /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n   todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n     this.checklistSelection.toggle(node);\n     this.checkAllParentsSelection(node);\n   }\n\n   /* Checks all the parents when a leaf node is selected/unselected */\n   checkAllParentsSelection(node: TodoItemFlatNode): void {\n     let parent: TodoItemFlatNode | null = this.getParentNode(node);\n     while (parent) {\n       this.checkRootNodeSelection(parent);\n       parent = this.getParentNode(parent);\n     }\n   }\n\n   /** Check root node checked state and change it accordingly */\n   checkRootNodeSelection(node: TodoItemFlatNode): void {\n     const nodeSelected = this.checklistSelection.isSelected(node);\n     const descendants = this.treeControl.getDescendants(node);\n     const descAllSelected = descendants.every(child =>\n       this.checklistSelection.isSelected(child)\n     );\n     if (nodeSelected && !descAllSelected) {\n       this.checklistSelection.deselect(node);\n     } else if (!nodeSelected && descAllSelected) {\n       this.checklistSelection.select(node);\n     }\n   }\n\n   /* Get the parent node of a node */\n   getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n     const currentLevel = this.getLevel(node);\n\n     if (currentLevel < 1) {\n       return null;\n     }\n\n     const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n     for (let i = startIndex; i >= 0; i--) {\n       const currentNode = this.treeControl.dataNodes[i];\n\n       if (this.getLevel(currentNode) < currentLevel) {\n         return currentNode;\n       }\n     }\n     return null;\n   }\n\n   /** Select the category so we can insert the new item. */\n   addNewItem(node: TodoItemFlatNode) {\n     const parentNode = this.flatNodeMap.get(node);\n     this._database.insertItem(parentNode!, '');\n     this.treeControl.expand(node);\n   }\n\n   /** Save the node to database */\n   saveNode(node: TodoItemFlatNode, itemValue: string) {\n     const nestedNode = this.flatNodeMap.get(node);\n     this._database.updateItem(nestedNode!, itemValue);\n   }\n\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { QuestionnaireComponent } from 'src/app/@components/questionnaire/questionnaire.component';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n@Component({\n  selector: 'app-craftsman-menu',\n  templateUrl: './craftsman-menu.component.html',\n  styleUrls: ['./craftsman-menu.component.scss']\n})\nexport class CraftsmanMenuComponent implements OnInit {\n  loading = false;\n  constructor(\n    private dialog: MatDialog, private snackbar: MatSnackBar,\n    private errorHandlerService: ErrorHandlerService\n  ) { }\n\n  ngOnInit() {\n  }\n\n\n  addClassroom() {\n    \n  }\n\n  addQuestionnaire() {\n    const $dialogRef =\n    this.dialog.open(\n      QuestionnaireComponent,\n      { width: '40vw', autoFocus: false }\n    );\n  }\n\n  private addIPRangeAfterClosed($dialogRef) {\n  \n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { TeacherService } from 'src/app/@services/teacher.service';\nimport { TeacherPreviewModel } from '../../models/teacher-preview.model';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n\n@Component({\n    selector: 'app-teacher-details',\n    templateUrl: './teacher-details.component.html'\n})\nexport class TeacherDetailsComponent implements OnInit {\n    loading = false;\n    teacher: TeacherPreviewModel;\n\n    constructor(\n        private activatedRoute: ActivatedRoute,\n        private errorHandlerService: ErrorHandlerService,\n        private teacherService: TeacherService\n    ) {}\n\n    ngOnInit() {\n        this.loading = true;\n        this.teacherService.getTeacherById(this.activatedRoute.snapshot.params.id)\n        .subscribe(\n            response => {\n                this.teacher =\n                    new TeacherPreviewModel(\n                        response.body.id,\n                        // response.body.full_name,\n                        // response.body.status\n                    );\n            }, error => {\n                this.errorHandlerService.handleRequestError(error);\n                this.loading = false;\n            },\n            () => { this.loading = false; }\n        );\n    }\n}\n","<div class=\"text-left\">\n    <button mat-raised-button color=\"primary\" class=\"m-2\" routerLink='/dashboard'>Dashboard</button>\n</div>\n<div class=\"text-center\">\n  <h1>Craftsman Menu</h1>\n</div>\n<hr>\n<div class=\"row\">\n  <div class=\"col-md-3\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\"><b>C</b></h3>\n        <span>* Create new courses from scratch\n        <br>* Tailor existing courses however you want\n        <br>* Keep track of your courses' statistics\n        </span>\n        <hr>\n        <button \n          mat-raised-button\n          class=\"mr-2\"\n          color='primary'\n          routerLink='/teachers/craftsman-menu/courses'>\n          <i class=\"far fa-edit\" style=\"font-size: 1.6em\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-3\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\"><b>Q</b></h3>\n        <p class=\"card-text\">Manage course Questionnaries and stuffs</p>\n        <hr>\n        <button \n          mat-raised-button\n          class=\"mr-2\"\n          color='primary'\n          (click)=\"addQuestionnaire()\">\n          Questionnaire\n          <i class=\"material-icons\">\n              playlist_add\n          </i>\n        </button>\n        <button color='primary' mat-raised-button class=\"mr-2\">\n          Preview\n          <i class=\"material-icons\">\n           list_alt\n          </i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-3\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\"><b>S</b></h3>\n        <p>Details for your students & stuffs</p>\n        <hr>\n        <button color='primary' mat-raised-button class=\"mr-2\">\n          Students\n          <i class=\"material-icons\">\n           list_alt\n          </i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-3\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n          <h3 class=\"card-title\"><b>Sketch Book</b></h3>\n        <p class=\"card-text\">* Add/Manage Tests and stuffs here</p>\n        <hr>\n        <button color='primary' mat-raised-button class=\"mr-2\">\n          <i style=\"font-size: 1.8em\" class=\"material-icons\">\n            playlist_add\n          </i> \n          TEST\n        </button>\n        <i class=\"far fa-edit\" style=\"font-size: 1.6em\"></i>\n      </div>\n    </div>\n  </div>\n</div>\n<ngx-loading [show]=\"loading\" [config]=\"{ backdropBorderRadius: '14px', fullScreenBackdrop: true }\"></ngx-loading>\n ","import { CoursePreviewModel } from '../../courses/models/course-preview-model.module';\n\nexport class TeacherPreviewModel {\n    Id: string;\n    Email: string;\n    Image: string;\n    Name: string;\n    UserId: string;\n    AccrNumber: string;\n    Status: string;\n    CreatedOn: Date;\n    ModifiedOn: Date;\n    Courses: Array<CoursePreviewModel>;\n    Stars: number;\n\n    constructor(\n        id?: string, email?: string, image?: string,\n        name?: string, userId?: string, accrNumber?: string, status?: string,\n        createdOn?: Date, modifiedOn?: Date, courses?: Array<CoursePreviewModel>,\n        stars?: number\n    ) {\n        this.Id = id;\n        this.Email = email;\n        this.Image = image;\n        this.Name = name;\n        this.UserId = userId;\n        this.AccrNumber = accrNumber;\n        this.Status = status;\n        this.CreatedOn = createdOn;\n        this.ModifiedOn = modifiedOn;\n        this.Courses = courses;\n        this.Stars = stars;\n\n    }\n\n}\n","<div class=\"row\">\n    <div class=\"col-md-6 text-center\">\n        <h4>Name: {{ teacher?.Name }}</h4>\n        <h4>Accreditation Number: {{ teacher?.Id }}</h4>\n        <h4>Teacher Status: {{ teacher?.Status }}</h4>\n    </div>\n    <div class=\"col-md-6\">\n        <img src=\"../../../../../assets/images/no-image-found.jpg\" alt=\"Sample image\">\n    </div>\n\n    <button  \n        type=\"button\"                        \n        class=\"btn btn-outline-info ml-3\" \n        routerLink='/teachers'>\n        Back To Teachers\n    </button>  \n</div>\n\n<ngx-loading [show]=\"loading\"></ngx-loading>","export class EditCourseModel {\n    CourseId: string;\n    Name: string;\n    Description: string;\n    IsActive: boolean;\n    StartDate: Date;\n    EndDate: Date;\n    Teachers: any;\n\n    constructor(id?: string, name?: string, description?: string, isActive?: boolean,\n                startDate?: Date, endDate?: Date, teachers?: any) {\n        this.CourseId = id;\n        this.Name = name;\n        this.Description = description;\n        this.IsActive = isActive;\n        this.StartDate = startDate;\n        this.EndDate = endDate;\n        this.Teachers = teachers;\n    }\n}\n","<section class=\"text-center\">\n    <h3>{{editCourseForm.value?.Name || 'N/A'}}</h3>\n    <h5>ID : {{model.Id}}</h5>\n    <hr>\n    <mat-tab-group [selectedIndex]=\"activeTab\" style=\"overflow:hidden;\">   \n        <mat-tab label=\"Overall Info\">\n            <ng-template matTabContent>\n                <div class=\"row\">\n                    <div class=\"col-md-4\">\n                        <form [formGroup]=\"editCourseImageForm\">\n                            <label for=\"CourseImg\">Course Image</label>\n                            <div class=\"thumb-holder\">\n                                <img\n                                    class=\"courseImg img-fluid img-thumbnail\"\n                                    [src]='model.Image'\n                                    alt=\"Course picture\">\n                                <input \n                                    type=\"file\"\n                                    formControlName='CourseImg'\n                                    #courseImage\n                                    style=\"display: none\"\n                                    (change)=\"onFileSelected($event)\"\n                                    accept=\"image/*\">\n                                <br>\n                                <button mat-stroked-button color=\"primary\" class=\"m-2\" (click)=\"courseImage.click()\">Upload picture</button>\n                                <button mat-stroked-button color=\"warn\" class=\"m-2\" (click)='clearPicture()'>Clear Picture</button>\n                            </div>\n                        </form>\n                        <button \n                            mat-raised-button \n                            (click)=\"editCourseImage()\"\n                            color=\"primary\"\n                            [disabled]=\"!editCourseImageForm.valid || !editCourseImageForm.dirty\">\n                            Update Course Image\n                        </button>\n                    </div>\n                    <div class=\"col-md-8\">\n                        <label>Course Info</label>\n                        <form [formGroup]='editCourseForm'>\n                            <div class=\"row\">\n                                <div class=\"col-md-8\">\n                                    <mat-form-field class=\"w-100\">\n                                        <textarea matInput formControlName=\"Name\" placeholder=\"Name\" cols=\"30\" rows=\"2\"></textarea>\n                                    </mat-form-field>\n                                    <br />              \n                                    <mat-form-field class=\"w-100\">\n                                        <textarea matInput formControlName=\"Description\" placeholder=\"Description (raw html is accepted)\" rows=\"10\"></textarea>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <mat-form-field class=\"w-75\">\n                                        <mat-label>Active</mat-label>\n                                        <mat-select [(value)]=\"model.IsActive\" formControlName=\"IsActive\">\n                                            <mat-option value=\"true\">True</mat-option>\n                                            <mat-option value=\"false\">False</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                    <mat-form-field class=\"w-75\">\n                                        <input\n                                            matInput\n                                            [matDatepicker]=\"startDatePicker\"\n                                            formControlName=\"StartDate\"\n                                            placeholder=\"Start Date\">\n                                        <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n                                        <mat-datepicker #startDatePicker></mat-datepicker>\n                                    </mat-form-field>\n                                    <mat-form-field class=\"w-75\">\n                                        <input\n                                            matInput\n                                            [matDatepicker]=\"endDatePicker\"\n                                            formControlName=\"EndDate\"\n                                            placeholder=\"End Date\">\n                                        <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n                                        <mat-datepicker #endDatePicker></mat-datepicker>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </form>\n                        <div class=\"text-center\">\n                            <button \n                                mat-raised-button \n                                (click)=\"editCourse()\"\n                                color=\"primary\"\n                                [disabled]=\"!editCourseForm.valid || !editCourseForm.dirty\">\n                                Update Course Info\n                            </button>\n                            <button \n                                style=\"width: 15%\"\n                                mat-stroked-button \n                                (click)=\"onRejectClick()\"\n                                color=\"warn\">\n                                Dismiss\n                            </button>\n                        </div>\n                    </div>\n                </div> \n            </ng-template>\n        </mat-tab>\n        <mat-tab label=\"Leading Teachers\">\n            <ng-template matTabContent>\n                <br>\n                <span *ngFor=\"let t of model.Teachers\" \n                    class=\"text-left\" \n                    style=\"float: left; \n                    padding: 10px;\"> \n                    {{t}}\n                    <button\n                        mat-stroked-button \n                        color='warn'\n                 >\n                        <i class=\"material-icons\">\n                            delete\n                        </i>\n                    </button>\n                </span>    \n                <br><br>\n                <div class=\"text-left\">\n                    <br>             \n                    <form [formGroup]=\"selectTeacherForm\">\n                        <mat-form-field class=\"w-25\">\n                            <mat-label class=\"text-left\">Add teacher to course</mat-label>\n                            <mat-select\n                                formControlName=\"Teacher\"\n                                matInput>\n                                <mat-option value=\"Teacher\">--</mat-option>\n                                <mat-option *ngFor=\"let t of teachers\" value=\"{{ t.Id }}\">{{ t.Name }}</mat-option>\n                            </mat-select>\n                        </mat-form-field> \n                        <button\n                            style=\"width: 10%\"\n                            mat-raised-button \n                            (click)=\"addTeacher2Course()\"\n                            color=\"primary\"\n                            [disabled]=\"!selectTeacherForm.valid\n                                        || !selectTeacherForm.dirty\n                                        || selectTeacherForm.controls.Teacher.value === 'Teacher'\">\n                            Add\n                        </button>                   \n                    </form>\n                </div>\n            </ng-template>\n        </mat-tab>\n        <mat-tab label=\"Enrolled Students\">\n            <ng-template matTabContent>\n                <p>Number of enrolled students: {{ model.EnrolledStudents }}</p>\n            </ng-template>\n        </mat-tab>\n    </mat-tab-group>\n    <hr>\n    <p>Modified On: {{model.ModifiedOn | date : 'dd-MMM-yy hh:mm:ss a'}}</p>\n</section>","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseDialogData } from 'src/app/@shared/interfaces/base-dialog.interface';\nimport { EditCourseModel } from 'src/app/@modules/courses/models/edit-course.model';\nimport { CoursePreviewModel } from '../../models/course-preview-model.module';\nimport { TeacherService } from 'src/app/@services/teacher.service';\nimport { TeacherPreviewModel } from 'src/app/@modules/teachers/models/teacher-preview.model';\n\n@Component({\n    selector: 'app-edit-course',\n    templateUrl: './edit-course.component.html',\n    styleUrls: ['./edit-course.component.scss']\n})\nexport class EditCourseComponent implements OnInit {\n  editCourseForm: FormGroup;\n  editCourseImageForm: FormGroup;\n  selectTeacherForm: FormGroup;\n  model: CoursePreviewModel;\n  loading = false;\n  defaultCourseImg: string;\n  teachers = new Array<TeacherPreviewModel>();\n  activeTab = 1;\n\n  constructor(\n    public dialogRef: MatDialogRef<EditCourseComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: BaseDialogData,\n    private formBuilder: FormBuilder,\n    private teacherService: TeacherService\n  ) { }\n\n  ngOnInit() {\n    this.getTeachers();\n    this.model = this.data.model;\n    this.editCourseForm =\n        this.formBuilder.group({\n        CourseId: [this.data.model.Id],\n        Name: [this.data.model.Name],\n        Description: [this.data.model.Description],\n        IsActive: [this.data.model.IsActive.toString()],\n        StartDate: [this.data.model.StartDate],\n        EndDate: [this.data.model.EndDate],\n      });\n    this.selectTeacherForm =\n      this.formBuilder.group({\n        Teacher: ['']\n      });\n    this.editCourseImageForm =\n      this.formBuilder.group({\n        CourseImg: ['', Validators.required]\n      });\n\n    this.defaultCourseImg =\n      this.model.Image ?\n      this.model.Image :\n      '../../../../assets/images/no-profile-img.png';\n    this.model.Image = this.defaultCourseImg;\n  }\n\n  onRejectClick() {\n    this.dialogRef.close();\n  }\n\n  editCourse() {\n    // const teachersArray = this.editCourseForm.controls.Teachers.value.split(', ');\n    // teachersArray.forEach(element => {\n    //   const formattedElement = element.trim();\n    //   const teacher = {\n    //     FirstName: formattedElement.split(' ')[0],\n    //     LastName: formattedElement.split(' ')[1]\n    //   };\n    //   this.teachers.push(teacher);\n    // });\n    const updateCourseEntry = {\n      label: 'updateCourseInfo',\n      course: new EditCourseModel (\n        this.editCourseForm.controls.CourseId.value,\n        this.editCourseForm.controls.Name.value,\n        this.editCourseForm.controls.Description.value,\n        this.editCourseForm.controls.IsActive.value,\n        this.editCourseForm.controls.StartDate.value,\n        this.editCourseForm.controls.EndDate.value\n      )\n    };\n\n    this.dialogRef.close(updateCourseEntry);\n  }\n\n  editCourseImage() {\n    const updatedCoursePicture = {\n      label: 'updateCoursePicture',\n      img2base64: this.model.Image\n    };\n\n    this.dialogRef.close(updatedCoursePicture);\n  }\n\n  addTeacher2Course() {\n    const teacherEntry = {\n      label: 'addTeacher2Course',\n      teacher: {\n        id: this.teachers.find(t => t.Id === this.selectTeacherForm.controls.Teacher.value).Id,\n        userId: this.teachers.find(t => t.Id === this.selectTeacherForm.controls.Teacher.value).UserId,\n        accrNumber: this.teachers.find(t => t.Id === this.selectTeacherForm.controls.Teacher.value).AccrNumber\n      }\n    };\n\n    this.dialogRef.close(teacherEntry);\n  }\n\n  clearPicture() {\n    this.model.Image = this.defaultCourseImg;\n    this.editCourseImageForm.controls.CourseImg.setValue('');\n  }\n\n  onFileSelected(event) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.resizeImage(file, 800, 600).then(blob => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.model.Image = reader.result.toString();\n        };\n        reader.readAsDataURL(blob);\n      },\n      error => {\n        console.error('Photo error!', error);\n        this.model.Image = this.defaultCourseImg;\n      });\n    }\n  }\n\n  private getTeachers() {\n    this.teacherService.getTeachers()\n    .subscribe(\n      response => {\n        response.body.forEach(element => {\n          const c = {\n            Id: element.id || '',\n            Email: element.email || '',\n            Image: element.image || '',\n            Name: element.name || '',\n            UserId: element.user_id || '',\n            AccrNumber: element.accr_number || '',\n            Status: element.status || '',\n            CreatedOn: element.created_on,\n            ModifiedOn: element.modified_on,\n            Courses: element.courses || ''\n          };\n          this.teachers.push(c as TeacherPreviewModel);\n        });\n      }\n    );\n  }\n\n  private resizeImage(file: File, maxWidth: number, maxHeight: number): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.src = URL.createObjectURL(file);\n      image.onload = () => {\n        const width = image.width;\n        const height = image.height;\n\n        if (width <= maxWidth && height <= maxHeight) {\n          resolve(file);\n        }\n\n        let newWidth;\n        let newHeight;\n\n        if (width > height) {\n          newHeight = height * (maxWidth / width);\n          newWidth = maxWidth;\n        } else {\n          newWidth = width * (maxHeight / height);\n          newHeight = maxHeight;\n        }\n\n        const canvas = document.createElement('canvas');\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n\n        const context = canvas.getContext('2d');\n\n        context.drawImage(image, 0, 0, newWidth, newHeight);\n\n        canvas.toBlob(resolve, file.type);\n      };\n      image.onerror = reject;\n    });\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseDialogData } from 'src/app/@shared/interfaces/base-dialog.interface';\n\n@Component({\n    selector: 'app-delete-entity',\n    template:\n    `\n    <div class=\"text-center\">\n      <h3>Warning!!!</h3>\n        <mat-card-content>\n        <hr/>\n        <h5>{{model.title}}</h5>\n        <h5>This action can't be undone!</h5>\n        <h5>Delete anyway?</h5>\n        <hr/>\n        <button mat-raised-button class=\"ml-3\" (click)=\"dismiss()\">{{model.rejectText}}</button>\n        <button mat-raised-button color='warn' class=\"ml-3\" (click)=\"delete()\">{{model.confirmText}}</button>\n      </mat-card-content>\n    </div>\n    `,\n    styleUrls: ['./delete-course.component.scss']\n})\nexport class DeleteCourseComponent implements OnInit {\n    model: any;\n    loading = false;\n\n    constructor(\n        public dialogRef: MatDialogRef<DeleteCourseComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: BaseDialogData\n    ) { }\n\n    ngOnInit() {\n        this.model = this.data;\n    }\n\n    dismiss() {\n        this.dialogRef.close();\n    }\n\n    delete() {\n        this.dialogRef.close(true);\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BaseDialogData } from 'src/app/@shared/interfaces/base-dialog.interface';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\nimport { CoursesService } from 'src/app/@services/courses.service';\n\n@Component({\n  selector: 'app-create-course',\n  template:\n  `\n  <div mat-dialog-content class=\"row justify-content-center\">\n    <form [formGroup]=\"addCourseForm\" class=\"text-center\">\n    <mat-form-field class=\"w-75\">\n        <input type=\"text\" matInput formControlName='courseName' placeholder=\"Course Name:\" required>\n        <mat-error *ngIf=\"addCourseForm.get('courseName').hasError('required')\">\n        Course Name is required!\n    </mat-error>\n    </mat-form-field>\n    <button\n    class=\"ml-3\"\n        mat-raised-button \n        (click)=\"createCourse()\"\n        color=\"primary\"\n        [disabled]=\"!addCourseForm.valid || !addCourseForm.dirty\">\n        Add Course\n    </button>\n    </form>\n    </div>\n  `,\n  styleUrls: ['./create-course.component.scss']\n})\nexport class CreateCourseComponent implements OnInit {\n    addCourseForm: FormGroup;\n    loading = false;\n\n    constructor(\n    public dialogRef: MatDialogRef<CreateCourseComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: BaseDialogData,\n    private formBuilder: FormBuilder,\n    private snackbar: MatSnackBar,\n    private errorHandlerService: ErrorHandlerService,\n    private coursesService: CoursesService\n    ) {\n    this.addCourseForm =\n        this.formBuilder.group({\n            courseName: ['', Validators.required]\n        });\n    }\n\n    ngOnInit() {}\n\n    createCourse() {\n        this.loading = true;\n        const entry = { Name: this.addCourseForm.value.courseName };\n        this.dialogRef.close(entry);  \n        this.loading = false; \n    }\n}\n","<h1 class=\"text-center\">Courses Settings</h1>\n<h5 class=\"text-center\">Total of: {{totalCourses}}</h5>\n\n<div id=\"filters\">\n  <mat-expansion-panel [expanded]='false'>\n    <mat-expansion-panel-header>\n      <mat-panel-title> <i class=\"material-icons\">search</i>  ...\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"row justify-content-left\">\n      <mat-form-field class=\"col-sm-2\">\n        <input type=\"text\" matInput id=\"teacherNameFilter\" (keyup)=\"applyFilter()\" placeholder=\"Teacher Name\">\n      </mat-form-field>\n      <mat-form-field class=\"col-sm-2\">\n        <input type=\"text\" matInput id=\"courseNameFilter\" (keyup)=\"applyFilter()\" placeholder=\"Course Name\">\n      </mat-form-field>\n    </div>\n  </mat-expansion-panel>\n</div>\n<h4 style=\"float: left;\">\n  <button\n    mat-raised-button color=\"primary\"\n    class=\"m-2\"\n    [routerLink]=\"['/dashboard']\">\n    Dashboard\n  </button>\n  <button\n    mat-raised-button color=\"primary\"\n    class=\"m-2\"\n    [routerLink]=\"['/teachers/craftsman-menu']\">\n    Craftsman Menu\n  </button>\n</h4>\n<h4 style=\"float: right;\">\n  <button \n    mat-raised-button \n    color=\"primary\"\n    class=\"m-2\"\n    (click)=\"createCourse()\">\n    <i style=\"font-size: 1.8em\" class=\"material-icons\">\n        playlist_add\n    </i>\n    Add Course\n  </button>\n</h4>\n<div id=\"listCourses\" class=\"mat-elevation-z8 table-responsive\">\n  <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows matSort>\n    <ng-container matColumnDef=\"#\">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef=\"let element; let i = dataIndex\"> {{ i + 1 }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.Id}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.Name}} </td>\n    </ng-container>\n\n    <!-- <ng-container matColumnDef=\"Start Date\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Start Date </th>\n      <td mat-cell *matCellDef=\"let element\" class=\"mr-3\"> {{element.StartDate | date : 'dd-MMM-yyyy'}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"End Date\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> End Date </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.EndDate | date : 'dd-MMM-yyyy'}} </td>\n    </ng-container> -->\n\n    <!-- <ng-container matColumnDef=\"Created On\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Created On </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.CreatedOn | date : 'dd/MM/yyyy'}} </td>\n    </ng-container> -->\n<!-- \n    <ng-container matColumnDef=\"Active\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element?.IsActive.toString() | titlecase}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Electable\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Electable </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element?.IsElectable.toString() | titlecase}} </td>\n    </ng-container> -->\n\n    <ng-container matColumnDef=\"Enrolled Students\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Enrolled Students </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.EnrolledStudents}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Pending Enroll Requests\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Pending Enroll Requests </th>\n      <td mat-cell *matCellDef=\"let element\"> n/a </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Teachers\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Teachers </th>\n      <td mat-cell *matCellDef=\"let element\"> n/a </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Properties\">\n      <th mat-header-cell *matHeaderCellDef > Properties </th>\n      <td style=\"cursor: pointer;\" mat-cell *matCellDef=\"let element\">\n        <button mat-raised-button color='primary' class=\"mr-2\" (click)=\"editCourse(element.Id)\">\n          <i class=\"material-icons\">\n            zoom_in\n          </i>\n        </button>\n        <button\n          mat-raised-button\n          color='warn'\n          (click)=\"deleteCourse(element.Id)\">\n          <i class=\"far fa-trash-alt\" style=\"font-size: 1.2em\"></i>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n    <!-- <ng-container matColumnDef=\"expandedDetail\">\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumns.length\">\n        <div class=\"example-element-detail\"\n            [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n          <div class=\"row\">\n            <div class=\"example-element-description col-md-4\">\n              <img src=\"{{element?.Image}}\" class=\"img-thumbnail\" alt=\"{{element?.Name}}\">\n            </div>\n            <div class=\"example-element-description col-md-4\">\n             <p>{{element?.Description}}</p>\n             <hr>\n             <h5>Teachers:</h5>\n             <p>{{ element?.Teachers }}</p>\n            </div>\n          </div>\n        </div>\n      </td>\n    </ng-container> -->\n    \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <!-- <tr mat-row *matRowDef=\"let element; columns: displayedColumns;\"\n        class=\"example-element-row\"\n        [class.example-expanded-row]=\"expandedElement === element\"\n        (click)=\"expandedElement = expandedElement === element ? null : element\">\n    </tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr> -->\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[10, 20, 30, 100]\"></mat-paginator>\n</div>\n<h2 *ngIf='loading'>Please wait! Fetching data from the server...</h2>\n<ngx-loading [show]=\"loading\"></ngx-loading>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CoursePreviewModel } from 'src/app/@modules/courses/models/course-preview-model.module';\nimport { CoursesService } from 'src/app/@services/courses.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\nimport { EditCourseComponent } from '../../components/edit-course/edit-course.component';\nimport { EditCourseModel } from 'src/app/@modules/courses/models/edit-course.model';\nimport { DeleteCourseComponent } from '../../components/delete-course/delete-course.component';\nimport { CreateCourseComponent } from '../../components/create-course/create-course.component';\nimport { TeacherService } from 'src/app/@services/teacher.service';\n\n@Component({\n    selector: 'app-courses-details',\n    templateUrl: './courses-details.component.html',\n    styleUrls: ['./courses-details.component.scss']\n})\nexport class CoursesDetailsComponent implements OnInit {\n    displayedColumns: string[] =\n    [\n      '#', 'Id', 'Name',\n      'Start Date', 'End Date',\n      'Active', 'Electable',\n      'Enrolled Students', 'Pending Enroll Requests',\n      'Teachers', 'Properties'\n    ];\n  public dataSource: MatTableDataSource<CoursePreviewModel>;\n  courses = new Array<CoursePreviewModel>();\n  loading = false;\n  expandedElement: CoursePreviewModel | null;\n  totalCourses = 0;\n\n  constructor(\n    private coursesService: CoursesService,\n    private errorHandlerService: ErrorHandlerService,\n    private dialog: MatDialog,\n    private snackbar: MatSnackBar,\n    private teacherService: TeacherService\n  ) { }\n\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n\n  ngOnInit(): void {\n    this.getCourses();\n  }\n\n  // Search in data table based on the input fields that're used from filters group\n  applyFilter() {\n    const teacherNameFilterValue = ( document.querySelector('#teacherNameFilter') as HTMLInputElement).value;\n    const courseNameFilterValue = ( document.querySelector('#courseNameFilter') as HTMLInputElement).value;\n\n    this.dataSource.filterPredicate = (data, filter) =>\n      (\n        // data.TeacherName.trim().toLowerCase().indexOf(filter.split('┼')[0]) !== -1 &&\n        data.Name.trim().toLowerCase().indexOf(filter.split('┼')[1]) !== -1\n      );\n\n    this.dataSource.filter =\n    `${teacherNameFilterValue.trim().toLowerCase()}┼${courseNameFilterValue.trim()}`;\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  createCourse() {\n    const $dialogRef =\n      this.dialog.open(\n        CreateCourseComponent,\n        { width: '50vw' }\n      );\n\n    this.tryCreateCourse($dialogRef);\n  }\n\n  editCourse(courseId: string) {\n    this.coursesService.getCourseById(courseId).subscribe(course => {\n      const $dialogRef = this.openEditCourseModal(course);\n      this.tryUpdateCourse($dialogRef, courseId);\n    });\n  }\n\n  deleteCourse(courseId: string) {\n    const $dialogRef =\n      this.dialog.open(\n        DeleteCourseComponent, {\n          data: {\n            title: `This will delete course with Id ${courseId}!`,\n            confirmText: 'Delete',\n            rejectText: 'Dismiss',\n            model: courseId\n          }\n        }\n      );\n\n    this.tryDeleteCourse($dialogRef, courseId);\n  }\n\n  deleteAllCourses() {\n    const $dialogRef = this.dialog.open(DeleteCourseComponent, {\n      data: {\n        title: 'This will delete all courses!',\n        confirmText: 'Delete All',\n        rejectText: 'Dismiss'\n      }\n    });\n\n    this.tryDeleteAllCourses($dialogRef);\n  }\n\n  private getCourses() {\n    this.loading = true;\n    this.coursesService.getCoursesPreview().subscribe(response => {\n      response.body.forEach(element => {\n        const c = {\n          Id: element.id,\n          Name: element.name,\n          Teachers: element.teachers,\n          Description: element.description,\n          StartDate: element.start_date,\n          EndDate: element.end_date,\n          ModifiedOn: element.modified_on,\n          Image: element.image,\n          IsActive: element.is_active,\n          IsElectable: element.is_electable,\n          EnrolledStudents: element.enrolled_students,\n          EnrolledUserId: element.enrolled_user_id\n        };\n        this.courses.push(c as CoursePreviewModel);\n      });\n      this.dataSource = new MatTableDataSource(this.courses);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n\n      this.loading = false;\n    }, err => {\n      this.errorHandlerService.handleRequestError(err);\n      this.loading = false;\n    },\n    () => { this.totalCourses = this.courses.length; });\n  }\n\n  private openEditCourseModal(course: any) {\n    return this.dialog.open(EditCourseComponent, {\n      width: '80vw',\n      maxHeight: '100vh',\n      data: {\n        model:\n          new CoursePreviewModel(\n            course.body.id,\n            course.body.name,\n            course.body.description,\n            course.body.teachers,\n            course.body.start_date,\n            course.body.end_date,\n            course.body.modified_on,\n            course.body.is_electable,\n            course.body.is_active,\n            course.body.image,\n            course.body.enrolled_students,\n          )\n      },\n      autoFocus: false\n    });\n  }\n\n  private tryUpdateCourse($dialogRef, courseId: string) {\n    this.loading = true;\n    $dialogRef.afterClosed()\n    .subscribe(\n      response => {\n        if (response) {\n          if (Object.values(response).includes('updateCourseInfo')) {\n            this.updateCourseInfo(response.course);\n          } else if (Object.values(response).includes('updateCoursePicture')) {\n            this.updateCoursePicture(response.img2base64, courseId);\n          } else if (Object.values(response).includes('addTeacher2Course')) {\n            this.addTeacherCourse(response.teacher, courseId);\n          }\n        }\n      }\n    );\n    this.loading = false;\n  }\n\n  private updateCourseInfo(course: EditCourseModel) {\n    this.coursesService.updateCourse({\n      CourseId: course.CourseId,\n      Name: course.Name,\n      Description: course.Description,\n      IsActive: course.IsActive,\n      StartDate: course.StartDate,\n      EndDate: course.EndDate,\n      // Teachers: course.Teachers\n    })\n    .subscribe(success => {\n      // update course in table\n      this.loading = true;\n      this.handleSuccess(course.CourseId);\n    }, error => {\n      this.handleError(error);\n    });\n  }\n\n  private updateCoursePicture(image2base64: string, courseId: string) {\n    this.coursesService.updateCoursePicture({\n      CourseId: courseId,\n      ImageAsBase64: image2base64\n    })\n    .subscribe(\n      () => {\n        this.handleSuccess(courseId);\n      }, error => {\n        this.handleError(error);\n      }\n    );\n  }\n\n  addTeacherCourse(teacher, courseId: string) {\n    this.teacherService.addTeacher2Course({\n      TeacherId: teacher.id,\n      UserId: teacher.userId,\n      AccrNumber: teacher.accrNumber,\n      CourseId: courseId\n    })\n    .subscribe(\n      () => {\n        this.handleSuccess(courseId);\n      }, error => {\n        this.handleError(error);\n      }\n    );\n  }\n\n  private handleSuccess(courseId: string) {\n    // const teachers = new Array<string>();\n    // updateCourseEntry.Teachers.forEach(element => {\n    //   teachers.push(element.FirstName + ' ' + element.LastName);\n    // });\n    this.coursesService.getCourseById(courseId)\n    .subscribe(\n      response => {\n        const editedCourse = new CoursePreviewModel(\n          response.body.id,\n          response.body.name,\n          response.body.description,\n          response.body.teachers,\n          response.body.start_date,\n          response.body.end_date,\n          response.body.modified_on,\n          response.body.is_active,\n          response.body.is_electable,\n          response.body.image,\n          response.body.enrolled_students\n        );\n        this.courses.splice(\n          this.courses.findIndex(u => u.Id === courseId),\n          1,\n          editedCourse\n        );\n        this.dataSource.data = this.courses;\n        this.loading = false;\n        // show info\n        this.snackbar.open('Course with ID: ' + editedCourse.Id + ' updated successfully.', 'OK', {\n          duration: 3000,\n          horizontalPosition: 'right',\n          verticalPosition: 'top',\n          panelClass: 'successSnackbar'\n        });\n      }\n    );\n  }\n\n  private handleError(error: any) {\n    this.errorHandlerService.handleRequestError(error);\n    this.loading = false;\n    // show info\n    this.snackbar.open('Course cannot be updated!', 'OK', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n      panelClass: 'dangerSnackbar'\n    });\n  }\n\n  private tryDeleteCourse($dialogRef, courseId: string) {\n    $dialogRef.afterClosed()\n    .subscribe(response => {\n      if (response) {\n        this.loading = true;\n        this.coursesService.deleteCourse({\n          CourseId: courseId\n        })\n          .subscribe(\n            success => {\n              this.loading = false;\n              this.courses = new Array<CoursePreviewModel>();\n              this.getCourses();\n              this.snackbar.open('Course was deleted successfuly!', 'X', {\n                duration: 3000,\n                horizontalPosition: 'right',\n                verticalPosition: 'top',\n                panelClass: 'successSnackbar'\n            });\n          }, error => {\n            this.errorHandlerService.handleRequestError(error);\n            this.loading = false;\n          }, () => { this.loading = false; }\n        );\n      }\n    });\n  }\n\n  private tryDeleteAllCourses($dialogRef) {\n    $dialogRef.afterClosed()\n    .subscribe(response => {\n      if (response) {\n        this.coursesService.deleteAllCourses()\n        .subscribe(\n          success => {\n            this.loading = true;\n            this.courses = new Array<CoursePreviewModel>();\n            this.getCourses();\n            // show info\n            this.snackbar.open('All courses deleted successfully.', 'X', {\n              duration: 3000,\n              horizontalPosition: 'right',\n              verticalPosition: 'top',\n              panelClass: 'successSnackbar'\n            });\n          }, error => {\n            this.errorHandlerService.handleRequestError(error);\n            this.loading = false;\n          },\n          () => { this.loading = false; }\n        );\n      }\n    });\n  }\n\n  private tryCreateCourse($dialogRef) {\n    $dialogRef.afterClosed()\n    .subscribe(response => {\n      if (response) {\n        this.coursesService.createCourse({\n            Name: response.Name\n        }).subscribe(\n            res => {\n                this.loading = false;\n                this.courses = new Array<CoursePreviewModel>();\n                this.getCourses();\n                this.snackbar.open(\n                `${res}`,\n                'X', {\n                    duration: 3000,\n                    horizontalPosition: 'center',\n                    verticalPosition: 'top',\n                    panelClass: 'successSnackbar'\n                });\n            },\n            error => {\n                this.loading = false;\n                this.errorHandlerService.handleRequestError(error);\n            }\n        );\n    }});\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TeachersComponent } from './teachers.component';\nimport { CraftsmanMenuComponent } from './views/craftsman-menu.component';\nimport { TeacherDetailsComponent } from './views/teacher-details/teacher-details.component';\nimport { CoursesDetailsComponent } from '../courses/views/courses-details/courses-details.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      { path: '', component: TeachersComponent },\n      { path: 'craftsman-menu', component: CraftsmanMenuComponent },\n      { path: 'craftsman-menu/courses', component: CoursesDetailsComponent },\n      { path: ':id', component: TeacherDetailsComponent}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class TeachersRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TeachersRoutingModule } from './teachers-routing-module.module';\nimport { AngularMaterialModule } from 'src/app/@core/angular-material.module';\nimport { TeachersComponent } from './teachers.component';\nimport { NgxLoadingModule, ngxLoadingAnimationTypes } from 'ngx-loading';\nimport { CraftsmanMenuComponent } from './views/craftsman-menu.component';\nimport { TeacherDetailsComponent } from './views/teacher-details/teacher-details.component';\nimport { EditCourseComponent } from '../courses/components/edit-course/edit-course.component';\nimport { DeleteCourseComponent } from '../courses/components/delete-course/delete-course.component';\nimport { CreateCourseComponent } from '../courses/components/create-course/create-course.component';\nimport { TeacherPreviewComponent } from './component/teacher-preview/teacher-preview.component';\nimport { VoteForTeacherComponent } from './component/vote-for-teacher/vote-for-teacher.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TeachersRoutingModule,\n    AngularMaterialModule,\n    ReactiveFormsModule,\n    NgxLoadingModule.forRoot({\n      animationType: ngxLoadingAnimationTypes.threeBounce,\n      primaryColour: '#88078e',\n      secondaryColour: '#c6ef23',\n      backdropBorderRadius: '14px',\n      fullScreenBackdrop: true\n    }),\n  ],\n  declarations: [\n    TeachersComponent,\n    CraftsmanMenuComponent,\n    TeacherDetailsComponent,\n    CreateCourseComponent,\n    EditCourseComponent,\n    DeleteCourseComponent,\n    TeacherPreviewComponent,\n    VoteForTeacherComponent\n  ],\n  entryComponents: [\n    CreateCourseComponent,\n    EditCourseComponent,\n    DeleteCourseComponent,\n    TeacherPreviewComponent,\n    VoteForTeacherComponent\n  ],\n})\nexport class TeachersModule { }\n"]}