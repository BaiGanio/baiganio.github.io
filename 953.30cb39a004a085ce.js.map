{"version":3,"file":"953.30cb39a004a085ce.js","mappings":"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","names":["ArticlePreviewComponent","constructor","articlesService","errorHandlerService","route","this","name","snapshot","params","ngOnInit","getArticleByTitle","subscribe","response","article","body","console","log","error","handleRequestError","loading","i0","selectors","ctx_r5","oxw","ArticlesComponent","authService","router","getArticles","articles","edit","id","navigate","tweakTitle","title","toLowerCase","replace","isUserLogged","isAuthenticated","BloggerCraftsmanViewComponent","bloggerService","controlName","errorName","formData","controls","hasError","FormGroup","nickname","FormControl","email","facebookUrl","githubUrl","onDismiss","reset","onSubmit","data","alert","Subject","super","arguments","value","hasNext","hasCompleted","_subscribe","subscriber","thrownError","Subscription","next","complete","maxLength","editorSubject","characterLimit","control","pipe","map","editor","characterCount","plugins","wordcount","getCharacterCount","maxlength","requiredLength","actualLength","routes","path","children","component","snackbar","AsyncSubject","myForm","Validators","createPost","Title","RawHtml","open","horizontalPosition","verticalPosition","panelClass","handleEditorInit","e","CreateArticleComponent","ctx","EditArticleComponent","ArticlesRoutingModule","RouterModule","ArticlesModule","CommonModule","AngularMaterialModule"],"sourceRoot":"webpack:///","sources":["./src/app/@modules/articles/article-preview/article-preview.component.ts","./src/app/@modules/articles/article-preview/article-preview.component.html","./src/app/@modules/articles/articles.component.html","./src/app/@modules/articles/articles.component.ts","./src/app/@modules/articles/blogger-craftsman-view/blogger-craftsman-view.component.ts","./src/app/@modules/articles/blogger-craftsman-view/blogger-craftsman-view.component.html","./node_modules/rxjs/_esm2015/internal/AsyncSubject.js","./src/app/@shared/validators/maxlength.validator.ts","./src/app/@modules/articles/create-article/create-article.component.html","./src/app/@modules/articles/articles-routing.module.ts","./src/app/@modules/articles/create-article/create-article.component.ts","./src/app/@modules/articles/edit-article/edit-article.component.ts","./src/app/@modules/articles/edit-article/edit-article.component.html","./src/app/@modules/articles/articles.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ArticlesService } from 'src/app/@services/articles.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n\n@Component({\n  selector: 'app-article-preview',\n  templateUrl: './article-preview.component.html',\n  styleUrls: ['./article-preview.component.scss']\n})\nexport class ArticlePreviewComponent implements OnInit {\n  loading = true;\n  article:any;\n  name:string;\n  constructor(\n    private articlesService: ArticlesService,\n    private errorHandlerService: ErrorHandlerService,\n    private route: ActivatedRoute\n  ) {\n    this.name = this.route.snapshot.params.name;\n  }\n\n  ngOnInit(): void {\n    this.articlesService.getArticleByTitle(this.name).subscribe(response => {\n      this.article = response.body;\n      console.log(this.article);\n    },\n    error => {\n      this.errorHandlerService.handleRequestError(error);\n    }, () => { this.loading = false; });\n  }\n\n}\n","\n<button mat-stroked-button routerLink='..'><< Back</button>\n\n<div class=\"container\">\n  <h1>{{ article?.title }}</h1>\n  <p>Created @ {{ article?.createdOn | date :'dd-MM-yyyy' }} by author {{ article?.blogger.nickname }}</p>\n  <hr>\n  <br>\n  <img src='{{ article?.imgUrl }}' class=\"img-thumbnail img-fluid\" alt=\"Sample image\">\n  <br><br>\n  <h4>{{ article?.content }}</h4>\n  <hr>\n  <br>\n</div>\n","<!-- <mat-progress-bar mode=\"indeterminate\" *ngIf='loading'></mat-progress-bar> -->\n<h1 class=\"title\">Latest Articles</h1>\n<button *ngIf='isUserLogged()' mat-raised-button routerLink='/articles/create'>\n  <i class=\"fas fa-plus\"></i> Create One\n</button>\n<hr>\n<br>\n<h3 class=\"wait-fetching\" *ngIf='loading'>Please wait! Fetching data from the server...</h3>\n<div class=\"row\">\n  <div *ngFor='let a of articles' class=\"col-md-4 text-center\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n          <img src='{{ a.imgUrl }}' class=\"img-thumbnail img-fluid\" alt=\"Sample image\">\n          <br><br>\n          <h4>{{ a.title }}</h4>\n          <hr>\n          <p>Created @ {{ a.createdOn | date :'dd-MM-yyyy' }}</p>\n          <p>Author {{ a.blogger.nickname }}</p>\n          <br>\n          <button\n              mat-raised-button\n              color=\"primary\"  [routerLink]=\"['/articles', tweakTitle(a.title)]\">\n              <i class=\"fas fa-search\"></i>\n          </button>\n\n          <button *ngIf='isUserLogged()' mat-raised-button (click)=\"edit(a.id)\">\n              <i class=\"fas fa-edit\"></i>\n          </button>\n        </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ArticlesService } from 'src/app/@services/articles.service';\nimport { AuthService } from 'src/app/@services/auth.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n\n@Component({\n  selector: 'app-articles',\n  templateUrl: './articles.component.html',\n  styleUrls: ['./articles.component.scss']\n})\nexport class ArticlesComponent implements OnInit {\n  loading = true;\n  articles:any;\n  constructor(\n    private articlesService: ArticlesService,\n    private errorHandlerService: ErrorHandlerService,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.articlesService.getArticles().subscribe(response => {\n      this.articles = response.body;\n    },\n    error => {\n      this.errorHandlerService.handleRequestError(error);\n    }, () => { this.loading = false; });\n  }\n\n  edit(id:any){\n    this.router.navigate(['/articles/edit/' +id]);\n  }\n\n  tweakTitle(title: string): string{\n    let res = title.toLowerCase().replace(/ /g, '-');\n    return res;\n  }\n\n  isUserLogged(): boolean {\n    return this.authService.isAuthenticated();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/@services/auth.service';\nimport { BloggersService } from 'src/app/@services/bloggers.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\n\n@Component({\n  selector: 'app-blogger-craftsman-view',\n  templateUrl: './blogger-craftsman-view.component.html',\n  styleUrls: ['./blogger-craftsman-view.component.scss']\n})\nexport class BloggerCraftsmanViewComponent implements OnInit {\n  formData: FormGroup;\n  constructor(\n    private bloggerService: BloggersService,\n    private errorHandlerService: ErrorHandlerService,\n    private authService: AuthService,\n  ) { \n   \n  }\n\n  ngOnInit(): void { \n    this.formData = new FormGroup({\n      nickname: new FormControl(''),\n      email: new FormControl(''),\n      facebookUrl: new FormControl(''),\n      githubUrl:  new FormControl('')\n    });\n    // if (this.authService.isAuthenticated() && this.blogger === undefined) {\n    \n    // this.bloggerService.getByToken()\n    //   .subscribe(\n    //       response => {\n    //         this.blogger = response.body;\n    //       },\n    //       error => {\n    //           this.errorHandlerService.handleRequestError(error);\n    //       },\n    //       () => {\n    //           this.prepForm();\n    //       }  \n    //   );\n    // }\n  }\n\n  public checkError = (controlName: string, errorName: string) => {\n    return this.formData.controls[controlName].hasError(errorName);\n  }\n\n  onDismiss(){\n    this.formData.reset();\n   \n  }\n\n  onSubmit(data){\n    alert(\"Here!\");\n    // this.loading = true;\n\n    // this.bloggerService.update({ Nickname: data.nickname, Email: data.email, FacebookUrl: data.facebookUrl, GitHubUrl: data.githubUrl })\n    // .subscribe(\n    //     () => {\n    //       this.getByToken();\n    //     },\n    //     error => {\n    //         this.errorHandlerService.handleRequestError(error);\n    //     },\n    //     () => {\n    //         this.formData.reset();\n    //         this.prepForm();\n    //         this.loading = false;\n    //     }\n    // );\n    \n  }\n\n\n}\n","<h3 class=\"text-center\">Create new posts from scratch & tailor existing ones. Track of your rate & comments.</h3>\n<br>\n\n\n\n<br>\n<div class=\"row text-center\">\n\n    <!-- <div class=\"col-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <form [formGroup]=\"formData\" (ngSubmit)=\"onSubmit(formData.value)\" class=\"example-form\">\n            <table class=\"example-full-width\" cellspacing=\"0\">\n                <tr>\n                    <td>\n                        <mat-form-field class=\"example-full-width\">\n                            <mat-label>Full Name:</mat-label>\n                            <input matInput disabled value=\"{{blogger?.firstName}} {{blogger?.lastName}}\">\n                        </mat-form-field>\n                    </td>\n\n                </tr>\n            </table>\n\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Nickname</mat-label>\n                <input matInput name=\"nickname\" formControlName=\"nickname\">\n                <mat-error *ngIf=\"checkError('nickname', 'required')\">This field is required!</mat-error>\n                <mat-error *ngIf=\"checkError('nickname', 'maxlength')\">Max 4 digits after decimal point!</mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Email for contacts</mat-label>\n                <input matInput name=\"email\" formControlName=\"email\">\n                <mat-error *ngIf=\"checkError('email', 'required')\">This field is required!</mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Facebook Profile Url</mat-label>\n                <input matInput  name=\"facebookUrl\" formControlName=\"facebookUrl\">\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>GitHub Profile Url</mat-label>\n                <input matInput  name=\"githubUrl\" formControlName=\"githubUrl\">\n            </mat-form-field>\n            <button\n                type=\"submit\"\n                mat-raised-button\n                color=\"primary\"\n                [disabled]=\"!formData.valid || !formData.dirty\">\n                Update\n            </button>\n            <button type=\"button\" *ngIf='formData.dirty'\n                mat-raised-button\n                color=\"informational\"\n                (click)='onDismiss()'>\n                Dismiss\n            </button>\n\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h3 class=\"card-title\"><b>S</b></h3>\n          <p>Details for your students & stuffs</p>\n          <hr>\n          <button color='primary' mat-raised-button class=\"mr-2\">\n            Students\n            <i class=\"material-icons\">\n             list_alt\n            </i>\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n            <h3 class=\"card-title\"><b>Sketch Book</b></h3>\n          <p class=\"card-text\">* Add/Manage Tests and stuffs here</p>\n          <hr>\n          <button color='primary' mat-raised-button class=\"mr-2\">\n            <i style=\"font-size: 1.8em\" class=\"material-icons\">\n              playlist_add\n            </i>\n            TEST\n          </button>\n          <i class=\"far fa-edit\" style=\"font-size: 1.6em\"></i>\n        </div>\n      </div>\n    </div> -->\n  </div>\n","import { Subject } from './Subject';\nimport { Subscription } from './Subscription';\nexport class AsyncSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    _subscribe(subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return super._subscribe(subscriber);\n    }\n    next(value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    }\n    error(error) {\n        if (!this.hasCompleted) {\n            super.error(error);\n        }\n    }\n    complete() {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            super.next(this.value);\n        }\n        super.complete();\n    }\n}\n","import {\n  AbstractControl,\n  AsyncValidatorFn,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { Observable, Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nexport const maxLength = (\n  editorSubject: Subject<any>,\n  characterLimit: number\n): AsyncValidatorFn => {\n  return (control: AbstractControl): Observable<ValidationErrors | null> => {\n    return editorSubject.pipe(\n      map((editor) => {\n        const characterCount = editor.plugins.wordcount.body.getCharacterCount();\n\n        return characterCount <= characterLimit\n          ? null\n          : {\n              maxlength: {\n                requiredLength: characterLimit,\n                actualLength: characterCount,\n              },\n            };\n      })\n    );\n  };\n};\n","<h1 class=\"title\"><span routerLink='..'>back</span> << Create Article</h1>\n<hr>\n<div class=\"editor-wrapper\">\n\n  <mat-card class=\"blog mat-elevation-z3\">\n    <mat-card-title>TinyMCE</mat-card-title>\n\n    <mat-card-content>\n      <form (ngSubmit)=\"onSubmit(myForm.value)\" [formGroup]=\"myForm\">\n        <mat-form-field class=\"slogan\">\n          <input\n            matInput\n            [formControl]=\"myForm.controls.title\"\n            placeholder=\"Title of your article\"\n            type=\"text\"/>\n\n          <mat-error *ngIf=\"myForm.controls.title.hasError('required')\">\n            Title is required\n          </mat-error>\n        </mat-form-field>\n\n        <div class=\"mat-form-field-wrapper\">\n          <editor\n            apiKey=\"qagffr3pkuv17a8on1afax661irst1hbr4e6tbv888sz91jc\"\n            [formControl]=\"myForm.controls.body\"\n            class=\"mat-elevation-z1\"\n            (onInit)=\"handleEditorInit($event)\"\n            [init]=\"{\n              icons: 'material',\n              skin: 'borderless',\n              plugins: 'wordcount',\n              menubar: false,\n              min_height: 150\n            }\"\n          ></editor>\n\n          <div class=\"mat-form-field-subscript-wrapper\">\n            <mat-error *ngIf=\"myForm.controls.body.hasError('maxlength')\">\n              Your post exceeds exceeds the character limit\n              {{ myForm.controls.body.getError('maxlength').actualLength }} /\n              {{ myForm.controls.body.getError('maxlength').requiredLength }}\n            </mat-error>\n\n            <mat-error *ngIf=\"myForm.controls.body.touched && myForm.controls.body.hasError('required')\">\n              This form is required\n            </mat-error>\n          </div>\n        </div>\n      </form>\n    </mat-card-content>\n\n    <mat-card-actions align=\"end\">\n      <button mat-raised-button (click)=\"onSubmit(myForm.value)\" [disabled]=\"!myForm.valid\">\n        Submit\n      </button>\n    </mat-card-actions>\n  </mat-card>\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ArticlePreviewComponent } from './article-preview/article-preview.component';\nimport { ArticlesComponent } from './articles.component';\nimport { BloggerCraftsmanViewComponent } from './blogger-craftsman-view/blogger-craftsman-view.component';\nimport { CreateArticleComponent } from './create-article/create-article.component';\nimport { EditArticleComponent } from './edit-article/edit-article.component';\n\nconst routes: Routes = [\n  { path: '',\n    children: [\n      { path: '', component: ArticlesComponent },\n      { path: ':name', component: ArticlePreviewComponent }\n    ]\n   },\n  { path: 'blogger-craftsman', component: BloggerCraftsmanViewComponent },\n  { path: 'create', component: CreateArticleComponent },\n  {\n    path: 'edit',\n    children: [\n      { path: ':id', component: EditArticleComponent }\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ArticlesRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AsyncSubject, Subject } from 'rxjs';\nimport { BloggersService } from 'src/app/@services/bloggers.service';\nimport { ErrorHandlerService } from 'src/app/@services/error-handler.service';\nimport { maxLength } from 'src/app/@shared/validators/maxlength.validator';\n\n@Component({\n  selector: 'app-create-article',\n  templateUrl: './create-article.component.html',\n  styleUrls: ['./create-article.component.scss']\n})\nexport class CreateArticleComponent implements OnInit {\n  private editorSubject: Subject<any> = new AsyncSubject();\n  myForm: FormGroup = new FormGroup({});\n  loading = false;\n\n  constructor(private bloggerService: BloggersService,\n    private errorHandlerService: ErrorHandlerService,\n    private snackbar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.myForm = new FormGroup({\n      title: new FormControl(\"\", Validators.required),\n      body: new FormControl(\"\", Validators.required, maxLength(this.editorSubject, 10))\n    });\n  }\n\n  onSubmit(data: any): void{\n    console.log(data);\n\n    this.bloggerService.createPost({Title: this.myForm.value.title, RawHtml: this.myForm.value.body }).subscribe(response => {\n      this.snackbar.open(`${response}`, 'X', {\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom',\n        panelClass: 'successSnackbar'\n      });\n    }, error => {\n        this.errorHandlerService.handleRequestError(error);\n        this.loading = false;\n    }, () => { this.loading = false; });\n  }\n\n  handleEditorInit(e) {\n    this.editorSubject.next(e.editor);\n    this.editorSubject.complete();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, } from '@angular/router';\n\n@Component({\n  selector: 'app-edit-article',\n  templateUrl: './edit-article.component.html',\n  styleUrls: ['./edit-article.component.scss']\n})\nexport class EditArticleComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute) {\n    this.route.snapshot.params.token;\n   }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>edit-article works!</p>\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ArticlesRoutingModule } from './articles-routing.module';\nimport { ArticlesComponent } from './articles.component';\nimport { BloggerCraftsmanViewComponent } from './blogger-craftsman-view/blogger-craftsman-view.component';\nimport { AngularMaterialModule } from 'src/app/@core/angular-material.module';\nimport { CreateArticleComponent } from './create-article/create-article.component';\nimport { EditArticleComponent } from './edit-article/edit-article.component';\nimport { DeleteArticleComponent } from './delete-article/delete-article.component';\nimport { ArticlePreviewComponent } from './article-preview/article-preview.component';\n\n\n@NgModule({\n  declarations: [\n    ArticlesComponent,\n    BloggerCraftsmanViewComponent,\n    CreateArticleComponent,\n    EditArticleComponent,\n    DeleteArticleComponent,\n    ArticlePreviewComponent\n  ],\n  imports: [\n    CommonModule,\n    ArticlesRoutingModule,\n    AngularMaterialModule\n  ],\n  // schemas: [CUSTOM_ELEMENTS_SCHEMA]\n  schemas:[NO_ERRORS_SCHEMA]\n})\nexport class ArticlesModule { }\n"]}